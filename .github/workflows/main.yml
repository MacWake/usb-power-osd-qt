name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.name }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubuntu-22.04
            runs-on: ubuntu-22.04
            generator: "Unix Makefiles"
            build_type: Release
          - name: macos-latest
            runs-on: macos-latest
            generator: "Unix Makefiles"
            build_type: Release
          - name: windows-cross
            runs-on: ubuntu-latest
            generator: "Unix Makefiles"
            build_type: Release

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install Qt for all platforms
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.5.3'
          host: ${{ matrix.name == 'windows-cross' && 'windows' || matrix.name == 'macos-latest' && 'mac' || 'linux' }}
          target: 'desktop'
          arch: ${{ matrix.name == 'windows-cross' && 'win64_msvc2019_64' || matrix.name == 'macos-latest' && 'clang_64' || 'gcc_64' }}
          modules: 'qtserialport qtconnectivity'
          setup-python: 'false'
          cache: true

      # Install additional Linux dependencies if needed
      - name: Install additional Linux dependencies
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev libxkbcommon-x11-0

      - name: Install MinGW and dependencies
        if: matrix.os == 'windows-cross'
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64 cmake zip

      # macOS code signing setup
      - name: Import Code-Signing Certificates
        if: matrix.os == 'macos-latest'
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ github.run_id }}

      - name: Configure CMake for Windows
        if: matrix.os == 'windows-cross'
        run: |
          cmake -B ${{github.workspace}}/build \
          -G "Unix Makefiles" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_SYSTEM_NAME=Windows \
          -DCMAKE_CROSSCOMPILING=TRUE \
          -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc \
          -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++ \
          -DCMAKE_RC_COMPILER=x86_64-w64-mingw32-windres \
          -DCMAKE_EXE_LINKER_FLAGS="-static-libgcc -static-libstdc++ -static" \
          -DCMAKE_CXX_FLAGS="-DSTATIC_BUILD"

      - name: Configure CMake (non-Windows)
        if: matrix.os != 'windows-cross'
        run: >
          cmake -B ${{github.workspace}}/build 
          -G "${{matrix.generator}}" 
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
          -DCMAKE_PREFIX_PATH=${{env.Qt6_DIR}}
          ${{ matrix.os == 'macos-latest' && '-DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"' || '' }}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}}

      # Linux deployment - bundle Qt libraries
      - name: Deploy Qt libraries (Linux)
        if: matrix.name == 'ubuntu-22.04'
        run: |
          # Install linuxdeployqt
          wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage
          
          # Create AppDir structure
          mkdir -p AppDir/usr/bin
          cp "${{github.workspace}}/build/usb-power-osd" AppDir/usr/bin/
          
          # Create desktop file
          cat > AppDir/usb-power-osd.desktop << 'EOF'
          [Desktop Entry]
          Type=Application
          Name=USB-C Power OSD
          Exec=usb-power-osd
          Icon=usb-power-osd
          Categories=Utility;
          EOF
          
          # Copy icon (assuming you have one)
          cp usb-power-osd.png AppDir/usb-power-osd.png || echo "No icon found, skipping"
          
          # Deploy Qt libraries
          ./linuxdeployqt-continuous-x86_64.AppImage AppDir/usb-power-osd.desktop -appimage -verbose=2

      # Windows deployment - bundle Qt libraries
      - name: Deploy Qt libraries (Windows)
        if: matrix.name == 'windows-cross'
        run: |
          # Create deployment directory
          mkdir -p ${{github.workspace}}/deploy/windows
          
          # Copy the executable
          cp ${{github.workspace}}/build/usb-power-osd.exe ${{github.workspace}}/deploy/windows/
          
          # Copy MinGW runtime libraries
          cp /usr/x86_64-w64-mingw32/lib/libwinpthread-1.dll ${{github.workspace}}/deploy/windows/ || echo "libwinpthread-1.dll not found"
          cp /usr/lib/gcc/x86_64-w64-mingw32/*/libgcc_s_seh-1.dll ${{github.workspace}}/deploy/windows/ || echo "libgcc_s_seh-1.dll not found"
          cp /usr/lib/gcc/x86_64-w64-mingw32/*/libstdc++-6.dll ${{github.workspace}}/deploy/windows/ || echo "libstdc++-6.dll not found"
          
          # Copy Qt libraries (you'll need to identify which Qt libs your app uses)
          # These paths may vary depending on how Qt was installed by install-qt-action
          QT_DIR=$(find $RUNNER_WORKSPACE -name "Qt" -type d | head -1)
          if [ -n "$QT_DIR" ]; then
            QT_BIN_DIR=$(find $QT_DIR -path "*/6.5.0/*/bin" -type d | grep mingw | head -1)
            QT_LIB_DIR=$(find $QT_DIR -path "*/6.5.0/*/lib" -type d | grep mingw | head -1)
            
            if [ -n "$QT_BIN_DIR" ]; then
              echo "Found Qt bin directory: $QT_BIN_DIR"
              cp $QT_BIN_DIR/Qt6Core.dll ${{github.workspace}}/deploy/windows/ || echo "Qt6Core.dll not found"
              cp $QT_BIN_DIR/Qt6Gui.dll ${{github.workspace}}/deploy/windows/ || echo "Qt6Gui.dll not found"
              cp $QT_BIN_DIR/Qt6Widgets.dll ${{github.workspace}}/deploy/windows/ || echo "Qt6Widgets.dll not found"
              cp $QT_BIN_DIR/Qt6Bluetooth.dll ${{github.workspace}}/deploy/windows/ || echo "Qt6Bluetooth.dll not found"
              cp $QT_BIN_DIR/Qt6SerialPort.dll ${{github.workspace}}/deploy/windows/ || echo "Qt6SerialPort.dll not found"
              cp $QT_BIN_DIR/Qt6Network.dll ${{github.workspace}}/deploy/windows/ || echo "Qt6Network.dll not found"
              
              # Copy platform plugins
              mkdir -p ${{github.workspace}}/deploy/windows/platforms
              cp $QT_LIB_DIR/../plugins/platforms/qwindows.dll ${{github.workspace}}/deploy/windows/platforms/ || echo "qwindows.dll not found"
            fi
          fi
          
          # Create a zip archive
          cd ${{github.workspace}}/deploy
          zip -r ../USB-Power-OSD-Windows.zip windows/

      # macOS code signing
      - name: Sign the macOS application
        if: matrix.os == 'macos-latest'
        run: |
          echo "Signing with Developer ID Application: ${{ vars.APPLE_SIGNING_ID }}"
          /usr/bin/codesign --force --options runtime --sign "Developer ID Application: ${{ vars.APPLE_SIGNING_ID }}" --verbose "${{github.workspace}}/build/USB Power OSD.app"

      # macOS notarization (optional but recommended)
      - name: Notarize the macOS application
        if: matrix.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        run: |
          # Create a ZIP archive of the app
          ditto -c -k --keepParent "${{github.workspace}}/build/USB Power OSD.app" "${{github.workspace}}/build/USB Power OSD.zip"
          
          # Notarize the app
          xcrun notarytool submit "${{github.workspace}}/build/USB Power OSD.zip" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "${{ vars.APPLE_TEAM_ID }}" \
            --wait
          
          # Staple the notarization ticket
          xcrun stapler staple "${{github.workspace}}/build/USB Power OSD.app"

      - name: Upload Windows artifacts
        if: matrix.name == 'windows-cross'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: ${{github.workspace}}/USB-Power-OSD-Windows.zip
          if-no-files-found: error

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: ${{github.workspace}}/build/USB Power OSD.app
          if-no-files-found: error

      # For Linux
      - name: Debug build output
        if: matrix.os == 'ubuntu-22.04'
        run: |
          echo "Listing build directory contents:"
          ls -la ${{github.workspace}}/build/
          echo "Finding executable by name:"
          find ${{github.workspace}}/build -name "USB*" -type f -executable

      - name: Upload Linux artifacts
        if: matrix.name == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: "USB-C_Power_OSD-*.AppImage"
          if-no-files-found: error
